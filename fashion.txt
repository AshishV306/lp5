#import libraries
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense, Flatten

#load mnist dataset from keras
from keras.datasets import fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

#normalize the images
train_images = train_images / 255.0
test_images = test_images / 255.0

train_images[0].shape

#Define the neural network model structure
model = Sequential()
model.add(Flatten(input_shape = (28, 28)))
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

print(model.summary())

#Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

#train the model for 20 epochs
model.fit(train_images, train_labels, epochs=20)

#evaluate the model
result = model.evaluate(test_images, test_labels)
print("Evaluation results:")
print("Loss:", result[0])
print("Accuracy:", result[1]*100)

#make predictions
prediction = model.predict(test_images)
predicted_labels = np.argmax(prediction, axis=1)

prediction

predicted_labels

#visualize prediction
images = 20
plt.figure(figsize=(4, 2*images))

for i in range(images):
    plt.subplot(images, 2, 2*i+1)
    plt.imshow(test_images[i], cmap='gray')
    plt.axis('off')

    plt.subplot(images, 2, 2*i+2)
    plt.bar(range(10), prediction[i])
    plt.xticks(range(10))
    plt.title(f"Predicted label: {predicted_labels[i]}:{test_labels[i]}")
    plt.tight_layout()

plt.show()