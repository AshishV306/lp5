#import libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

#load imdb dataset from keras
from keras.datasets import imdb

#split the dataset into train and test of reviews data and its labels
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

train_data[:2]

train_labels[:20]

'''
#get the word index
word_index = imdb.get_word_index()

#get the key, values of word index
reviews_data_dict = dict([(value, key) for (key, value) in word_index.items()])

#convert the reviews data into text form
reviews_data = ' '.join([reviews_data_dict.get(i - 3, '?') for i in train_data[0]])
'''

#set independent data (reviews data) by vectorize into 0 and 1
def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1.0
    return results

X_train = vectorize_sequences(train_data)
X_test = vectorize_sequences(test_data)

X_train

#set dependent data (labels data)
Y_train = np.asanyarray(train_labels).astype('float32')
Y_test = np.asanyarray(test_labels).astype('float32')

Y_train

#define neural network model structure
model = Sequential()
model.add(Dense(32, activation='relu', input_shape=(10000,)))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

print(model.summary())

#compile the model
model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])
X_val = X_train[:10000]
Y_val = Y_train[:10000]

#train the model with 20 epochs
model.fit(X_train, Y_train, epochs=20, batch_size=512, validation_data=(X_val, Y_val))

#evaluate the model
result = model.evaluate(X_test, Y_test)
print("Evaluation results:")
print("Loss:", result[0])
print("Accuracy:", result[1]*100)

